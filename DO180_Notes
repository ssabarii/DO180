
  Welcome to DO180
	Red Hat OpenShift I: Containers & Kubernetes  			EX180	OCP 4.10
	
	

Name:
Org: If Possible
Experience:
		Be able to use a Linux terminal session and issue operating system commands. An RHCSA certification is recommended but not required.
			vim cp mv  rm mkdir cd ssh 
		Have experience with web application architectures and their corresponding technologies.
Expectation:
City/Timezone:
Hobbies:







SDN Pods/Containers Services
OCP has local image registry

POD basic unit of management	
Normally in most cases one pod have one container
in some cases one pod can contain multiple containers


to start container, we need image
Image can come from: docker.io, quay.io or private registry

Developers: doesn't know how to build image
source code
s2i source to image:

pull source code(PHP app of vodafone) from github + builder image(PHP lib) = Application Image the store in OCP internal registry

OCP pull image from OCP internal registry and start your pods(container)

Route is only OCP




Starting a container

Pull Image:		sudo podman pull Image_name
Run container:		sudo podman run imagename (if image doesn't exist it pull and then run)

 


podman is default RHEL 7.6



Chapter 1:


		Traditional Machine				Container
Hardware	Physical/Virtual				Container
Software	OS, PHP,MYSQL, Compile/deploy app		Image(OS Lib, PHP,MYSQL, Compiled app) [Registry]	
	
Container is provided by  Podman, Docker, LXC
Image is developed by developer and pushed to Registry
Registry/Central Repository
1. Public: docker.io, quay.io
2. Subscription: registry.redhat.io
3. Private/Org: Internal Registry

Benefits of Containers:
1. Require far fewer hardware resources 
2. quick to start
3. Less Storage Space

When to use containers:
1. software application with all of its dependent services (databases, messaging, httpd)
2. Persistence by using methods
3. Security is same as traditional
4. Microservice	

When NOT to use containers:
1. E.g. App is to measure H/w CPU cycles, File system usage/Disk, I/O cycles 
2. Performance


	OCP3.x			OCP4.x
	docker			podman
	getting heavier		lightweight container platform
	Same commands		Same commands
	daemon(service)		daemon-less



			Kubernetes		Openshift
Container		docker/podman		Podman
App Access		Ingress/Nodeport	Route
replica			Replicaset		Replication Controller
deploy			deployment		deploymentconfig
registry		NA			Internal Registry
web			web			more features of web
source to image		NA			s2i is  inbuild in OCP


OCP is certified version of Kubernetes

When to use:

Reuse Application (WEB,DATABASE)
NOT Using	Hardware,CPU,MEMORY,Hypervisor,Real Time APP


Limitations of containers:
google ~2B
Android Phones           Youtube,Map,Drive,Gmail,Crome (10 Services) 
1 Container per service per user

Natwest  10    2con died   start 2 automatically 


Self-Mangement of Containers, orachestration
Kubernetes is google contribution


Openshift run Multiple Services:
1. Pods/containers which helps running openshift cluster
2. Pods/containers which helps running User/customer services

	Chapter 2:
	
run Containers as Root User:	CNI(Container Network Interface) used and provide IP to Container 
run Containers as Normal User: 	CNI(Container Network Interface) can not be used, so NO IP Provided to Container, 
				Port Forward COntainer to HOST 

OCI-CRI
CRIO
Open Container Initiative - Container Runtime Interface


sudo podman run --name mysql-basic -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=items -e MYSQL_ROOT_PASSWORD=r00tpa55 -d rhscl/mysql-57-rhel7:5.7-3.14
CREATE TABLE Projects (id int(11) NOT NULL,name varchar(255) DEFAULT NULL,code varchar(255) DEFAULT NULL,PRIMARY KEY (id));


root and rootless Containers:

Host(Workstation)	sudo(root)				student	
Containers(image)	root					root/normal user
	
Images:
docker.io/quay.io	Images want to run as root (Bad for security)	
Redhat Images		Images normally run as NON root (Good for security)


Chapter 3:

public	docker.io quay.io	free not support
redhat	access.redhat.com	subscription support
private	local			internal




sudo podman rm $(sudo podman stop $(sudo podman ps -aq))


Chapter 4:

How to Create Images:

1. Save Container changes as Image OR as a tar File
2. Dockerfile/Containerfile (Automated)
3. s2i (Source to Image) Developer(PHP Code) + compilation(Base Builder Image with PHP) = Application Image(which can be put on container)
4. Buildah




Save Container as Image:

1. Run Container with existing Image

	podman run -d --name=me httpd

2. Make Changes to Container

	podman exec -it me /bin/bash
	podman diff me

3. Save Container as New Image and Test

	podman stop me
	podman commit -a "Author_name"  me Image_name     //-m "Meaningful_Message" only for docker

4. Tag The Image
	podman tag d591aa3a8577 quay.io/do180/cc:v1.0

5. Save Image as Tar File

	podman save -o	me.tar do180/cc 

6. Test new Container with Tar File Image 

	podman load -i me.tar

7. Push Image to Registry

	podman push quay.io/do180/cc:v1.0

Problem with Previous way:
1. Reproducing Steps
2. More op create more layers that increases size of Image


Dockerfile/Containerfile

		Add								copy 	
1.		copy from working directory			copy from working directory
		to image folder						to image folder
2.		Download from internet				NA 
		and put in image
3.		tar file extract and copy contents		copy tar file as it is to image
		to Image

dnf install docker-ce docker-ce-cli containerd.io

https://github.com/openshift/source-to-image

s2i (Source to Image) Developer(PHP Code) + compilation(Builder Image with PHP) = Application Image(which can be put on container)
Build-config

Download s2i from github or install package


// Docker Only
./s2i build https://github.com/sclorg/django-ex centos/python-35-centos7 hello-python

//compatible with Podman
./s2i build https://github.com/sclorg/django-ex centos/python-35-centos7 hello-python --as-dockerfile ~/some_folder/Containerfile
cd some_folder
podman build -t image_name .



Buildah:

yum module install container-tools
buildah from scratch
buildah mount working-container

yum install --installroot /var/lib/containers/storage/overlay/240a...b6ce/merged  bash coreutils  --releasever 8  --setopt install_weak_deps=false
yum clean all  --installroot /var/lib/containers/storage/overlay/240a...b6ce/merged  --releasever 8

buildah config --cmd /bin/bash working-container
buildah config --label name=rhel-base working-container
buildah unmount working-container
buildah commit working-container rhel-base
buildah images

Test Image: 
podman inspect localhost/rhel-base
podman run --rm -it localhost/rhel-base /bin/bash
buildah rm working-container
buildah rmi rhel-base


Chapter 6:

Openshift is certified version of kubernetes
Project = namespace + additional features
	Kubernetes			Openshift
1.	Namespace			Project				
2. 	replicaset			Replication Controller		takes current state to desired state 
3.	Deployment			DeploymentConfig
4.  	Ingress				Route


Difference Deployment and DeploymentConfig

https://docs.openshift.com/container-platform/4.6/applications/deployments/what-deployments-are.html#deployments-comparing-deploymentconfigs_what-deployments-are

Project:

Pods for Openshift Management goes to Master Nodes:
Pods for Application/Developers goes to Worker Nodes/Compute Nodes:

1. Project
2. Source Code
3. Builder Image
4. BuildConfig: Create image using above resources
5. Builder: Push new image to OCP internal Registry
6. Deployment: Pull new image from internal registry and start pod with new image
7. Pod start runnin with new Image

oc new-app --as-deployment-config --docker-image=registry.access.redhat.com/rhscl/mysql-57-rhel7:latest --name=mysql-openshift  -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=testdb  -e MYSQL_ROOT_PASSWORD=r00tpa55

oc whoami -t
cat .kube/config

Namespace(Kubernetes)  == Project(OCP)

Project = Kubernetes+ Extra Options



Build config (bc) is created when you don't have image, create image via s2i

With Source code and Build Image:

//Create BC and DC
oc new-app -i php:7.1 https://github.com/${RHT_OCP4_GITHUB_USER}/DO180-apps/ --context-dir php-helloworld --name=php-s2i


Deployment config (dc)

//Only DC is created
With already Existing Image:

oc new-app --docker-image=registry.access.redhat.com/rhscl/mysql-57-rhel7:latest -e MYSQL_USER=user1 -e MYSQL_PASSWORD=mypa55 -e MYSQL_DATABASE=testdb -e MYSQL_ROOT_PASSWORD=r00tpa55 --name=mysql-docker


Routes




//Source to Image via Openshift

Openshift Internal Registry: 	php 7.3 is builder image  
Remote Registry: 		quay.io docker.io, registry.redhat.io, registry.access.redhat.com, Org. Registry
Source Code
= Application Image



oc new-app --image-stream myiname:1.0 https://github.com/openshift/ruby-hello-world --name=ruby-hello

One pod can have more than 1 container
but good practise 1 pod/1 conatiner




Chapter 7:

	OCP Templates:
oc get template mysql-ephemeral -n openshift > mysql-ephemeral-template.json

oc process -f mysql-ephemeral-template.json -p MYSQL_USER=user1 -p MYSQL_PASSWORD=mypa55 -p MYSQL_DATABASE=items  | oc create -f -


OR

1.	Export/Create Template:
oc get template mysql-ephemeral -n openshift -o yaml > export_template.yaml

2.	Process Template with your Values(Fill the form with your values):
oc process -f export_template.yaml -o yaml -p MYSQL_USER=user1 -p MYSQL_PASSWORD=mypa55 -p MYSQL_DATABASE=items > filled.yaml

3.	Execute the processed Template/Create all resources mentioned in Template:
oc create -f filled.yaml

	Delete all resources in project:
oc delete all --all


One step solution for deploying your complex application:
Large Application eCommerce Amazon
									ReplicationController/ReplicaSet
										
			App_Image	ImageStream	Pods	Service		RC/ReplicaSet	secrets		Deployment/DeploymentConfig	BuildConfig	Route 	
Front End		I1(S2I)		PHP7.3		40		1			1					2				1					1		1	
Service End		I2(S2I)		Java EJB		20		1			1					2				1					1		0
Database		I3		MYSQL(6.0)		10		1			1					4				1					0		0


47+26+17= 90 Resources

ReplicationController/ReplicaSet: Scaling of Pods from Current State to Desired State


	Deployment			DeploymentConfig
	deploy image to Pods		deploy image to Pods
	Kubernetes			Openshift
	ReplicaSet			ReplicatonController
	
		
Use Deployment all time unless you need something which is only avaiable in DeploymentConfig


BC  php7.3~SOURCE_CODE
    --docker-image=quay.io/image_path

	1 Step Solution app.yml (OpenShift Template)
	oc create -f app.yml (82 objects)
	
oc port-forward pod-name 1111:8080 2222:3306



oc create configmap db-config --from-literal=user_value=user1 --from-literal=db_value=items

oc create secret generic mysql --from-literal=MYSQL_PASSWORD=mypa55 --from-literal=MYSQL_ROOT_PASSWORD=r00tpa55







